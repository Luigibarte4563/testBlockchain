{
	"compiler": {
		"version": "0.8.17+commit.8df45f5f"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "oldValue",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newValue",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "updater",
						"type": "address"
					}
				],
				"name": "ValueUpdated",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "getOwner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_newValue",
						"type": "uint256"
					}
				],
				"name": "updateValue",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "value",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "Gemini",
			"details": "This contract demonstrates basic access control using the 'onlyOwner' modifier. The value can only be set by the contract's deployer.",
			"kind": "dev",
			"methods": {
				"constructor": {
					"details": "The constructor is a special function that is executed only once, upon contract deployment. It sets the 'owner' to the address that deployed the contract. 'msg.sender' is a global variable containing the address of the account that called the function."
				},
				"getOwner()": {
					"details": "This function is a public view function, meaning it doesn't modify the state and can be called for free."
				},
				"updateValue(uint256)": {
					"details": "This function can only be called by the owner of the contract due to the 'onlyOwner' modifier. It emits the 'ValueUpdated' event.",
					"params": {
						"_newValue": "The new value to be set."
					}
				}
			},
			"title": "A simple contract to store and update a value.",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"getOwner()": {
					"notice": "Returns the address of the contract owner."
				},
				"updateValue(uint256)": {
					"notice": "Updates the stored value."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/walletConnect.sol": "UpdatableValue"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/walletConnect.sol": {
			"keccak256": "0xdf00863483a3f3d8cd9409c8df9dcb2e15386d4fd079ce170adcd257cfdf33ed",
			"license": "MIT",
			"urls": [
				"bzz-raw://713404829558820f6738d1686a8fee035c6ac861bb92a270d6d72eb8123024ea",
				"dweb:/ipfs/QmfX9BcJ1a93MdBhHuXhk3YnmYUJ6qNaT2BFsUbMN7Q9iG"
			]
		}
	},
	"version": 1
}